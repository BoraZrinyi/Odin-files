A html fejlécébe be kell linkelni a styles.ccs-t, különben nem működik!!!!


				<!-- index.html -->

				<head>
				<link rel="stylesheet" href="styles.css">
				</head>




# BASIC SYNTAX

Selectors
--------
									Selector {property: value}



1 - Universal Selector
									Mindent kiválaszt, jele *
									Jele a csillag:       * {tuladonság: érték}
		* {  color: purple;}

2 - Type Selector
									Kiválasztja az adott típust, és alkalmazzza a megadott tulajdonságot és valuet - jele a typus neve mint itt a div

									div egy üres konténer ami tartalmazhat bármit
		div {  color: white;}

3 - Class Selector
									Amikor megadod egy classz nevét, kiválaszthatod az összes elementet ami ahhoz a classz hoz tartozik és adhatsz nekik egységes dizájnt.

									Egy element több osztályba is tartozhat egyszerre, de csak egy ID-je lehet

									Jele a pont:        .osztálynév {tulajdonság:érték}
				<!-- index.html -->

		<div class="alert-text">Please agree to our terms of service.</div>

				/* styles.css */

		.alert-text {  color: red;}

4 - ID Selector

										Amikor egy csoport elementnek ugyanaz a neve, viválaszthatod név szerint őket, és alkalmazhatod ugyanazt a tulajdonságot az összesre aminek ugyanaz a neve.

										Egy elementnek csak egy neve lehet, de egyszerre több osztályba is tartozhat.

										Jele #:          #IDnév { tulajdoság: érték}


				<!-- index.html -->

		<div id="title">My Awesome 90's Page</div>

				/* styles.css */

		#title {  background-color: red;}

6 - Grouping Selector

										Több elemet összecsoportosíthatsz egy csoportba, és alkalmazhatod rájuk ugyanazt a tulajdonságot.

										Jele a pont:       .csoport1, .csoport2 {tulajdonság: érték}
				
					.read, .unread {color: white;	background-color: black;}

					.read {	/* several unique declarations */	}

					.unread {	/* several unique declarations */	}


7 - Chaining selectors
										Kiválasztja azokat a csoportokat, amelyeknek mindkét selector benne van az osztályába/meghatározásában. 

										Jele a pont: 		.slector1.selector2 {tulajdonság: érték}

					.subsection.header {  color: red;}

					.subsection#preview {  color: blue;}

8 - Descendant combinator
										Kiválasztja azokat az elememeket amelyeknek adott neve van, ÉS egy meghatározott szülőosztályból származnak.

										Jele a pont .szülőclass .class {tulajdonság: érték}

							/* styles.css */

					.ancestor .contents {	/* some declarations */	}






Properties
----------


1 - Color
		Name, HEX, RGB, and HSL values
				{color: red} 

2 - Background color
		Name, HEX, RGB, and HSL values
				{bckground-color: blue} 
				h1 {  color: black;  background-color: rgb(197 93 161);}


3 - Typography
		Betütípus
			font-family: "Times New Roman", serif;
		Betüméret
			font-size: 22px
		Betüvastagság
			font-weight: bold
			or
			font-weight: 700
		Text align
			text-align: center

4 - Pictures
		img {  height: auto;  width: 500px; }




3 ways to set up CSS for a site

	1 - External CSS
						Be kell linkelni a css-t a html-be, különben nem találja.
						External CSS is the most common method you will come across, and it involves creating a separate file for the CSS and linking it inside of an HTML’s opening and closing <head> tags with a void <link> element:

											<!-- index.html -->

											<head>
											<link rel="stylesheet" href="styles.css">
											</head>
	2 - Internal CSS (embedded CSS)
						With the internal method, you place all the rules inside of a pair of opening and closing <style> tags, which are then placed inside of the opening and closing <head> tags of your HTML file. Since the styles are being placed directly inside of the <head> tags, we no longer need a <link> element that the external method requires.
	3 - Inline CSS
						Beírod a stílust az első > elé.
						<button style="background-color: orange; font-size: 18;">Inline Method</button>




Data types
----------
			<integer>	An <integer> is a whole number such as 1024 or -55.

			<number>	A <number> represents a decimal number — it may or may not have a decimal point with a fractional component. For example, 0.255, 128, or -1.2.

			<dimension>	A <dimension> is a <number> with a unit attached to it. For example, 45deg, 5s, or 10px. <dimension> is an umbrella category that includes the <length>, <angle>, <time>, and <resolution> types.

			<percentage>	A <percentage> represents a fraction of some other value. For example, 50%. Percentage values are always relative to another quantity. For example, an element's length is relative to its parent element's length.



Relative sizes
			px - 		EZ fix méret, nem változik amikor valami más változik, sem a viewport változik
			vh or vw - 	ITT A vieport változása megváltoztatja az elem méretét
			em - 		EZ relative az elemben tartozkodó betümérettel. Ha a betüméret nő, 
						a szövegdoboz vagy az element mérete automatikusan nő, 
						Amikor egymásha nest elementeket, akkor lépésről-lépésre kisebb vagy nagyobbá válik a lista méret
			rem - 		EZ OLYAN mint az em, de minden a gyökérelem méretéhez igazodik

						the em unit means "my parent element's font-size" if used for font-size (and "my own font-size" when used for anything else)
						the rem unit means "The root element's font-size" (rem stands for "root em").

			lh - 		LANE MAGASSÁG ahogy a szülő element magassága változik, úgy változik arányosan ez is.
			rlh - 		LANE MAGASSÁG, de nem függ a közvetlen szülő element változásától, 
						hanem a gyökér element változása változtatja meg.




